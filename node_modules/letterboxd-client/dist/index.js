"use strict";
exports.__esModule = true;
var core_1 = require("./lib/core");
var errors_1 = require("./lib/errors");
var Client = /** @class */ (function () {
    function Client(apiKey, apiSecret, accessToken) {
        var _this = this;
        this.credentials = {};
        this.auth = {
            /**
             * Request a link via email to reset the password for a member's account.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--auth-forgotten-password-request}
             */
            forgottenPasswordRequest: function (body) {
                return (0, core_1.request)({
                    method: 'post',
                    path: '/auth/forgotten-password-request',
                    auth: _this.credentials,
                    body: body
                });
            },
            /**
             * Generate a single-use token for the current member, which can be used to sign the member into
             * the Letterboxd website by passing it as the value of the `urt` query parameter.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @see {@link https://api-docs.letterboxd.com/#path--auth-get-login-token}
             */
            getLoginToken: function () {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: '/auth/get-login-token',
                    auth: _this.credentials
                });
            },
            /**
             * Revoke a users' access token.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--auth-revoke}
             */
            revokeAuth: function () {
                if (_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/auth/revoke',
                    auth: _this.credentials
                });
            },
            /**
             * Use a member's credentials to sign in and receive an authentication token.
             *
             * Use this endpoint to generate or refresh an auth token. See
             * [Authentication](https://api-docs.letterboxd.com/#auth) for more details.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--auth-token}
             */
            requestAuthToken: function (username, password) {
                if (_this.credentials.accessToken) {
                    return Promise.reject(new Error('You cannot retrieve tokens on a client that has already been configured with a token. Create a new client instance without providing any `accessToken` parameter to the constructor.'));
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/auth/token',
                    auth: _this.credentials,
                    body: {
                        grant_type: 'password',
                        username: username,
                        password: password
                    },
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                });
            },
            /**
             * Check if a username is available to register.
             *
             * Use this endpoint to check the validity and availability of a given username. Usernames must
             * be between 2 and 15 characters long and may only contain upper or lowercase letters, numbers
             * or the underscore (`_`) character. Usernames associated with deactivated accounts are not
             * automatically released to the pool of available names (members will need to contact Letterboxd
             * Support for assistance).
             *
             * @see {@link https://api-docs.letterboxd.com/#path--auth-username-check}
             */
            usernameCheck: function (username) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/auth/username-check',
                    auth: _this.credentials,
                    params: {
                        username: username
                    }
                });
            }
        };
        this.comment = {
            /**
             * Update the message portion of a comment.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)). Comments may only be edited by
             * their owner.
             *
             * @param id The LID of the comment/reply.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--comment--id-}
             */
            update: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/comment/".concat(id),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Report a comment by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the comment/reply.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--comment--id--report}
             */
            report: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/comment/".concat(id, "/report"),
                    auth: _this.credentials,
                    params: params
                });
            }
        };
        this.contributor = {
            /**
             * Get details about a film contributor by ID.
             *
             * Contributors include the film's director(s), cast, crew and studio(s).
             *
             * @param id The LID of the contributor.
             * @see {@link https://api-docs.letterboxd.com/#path--contributor--id-}
             */
            getContributor: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/contributor/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * A cursored window over the list of contributions to films for a contributor.
             *
             * Use the `next` cursor to move through the list
             *
             * @param id The LID of the contributor.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--contributor--id--contributions}
             */
            getContributions: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/contributor/".concat(id, "/contributions"),
                    auth: _this.credentials,
                    params: params
                });
            }
        };
        this.filmCollection = {
            /**
             * Get details about a film collection by ID. The response will include the film relationships
             * for the signed-in member and the member indicated by the `member` LID if specified.
             *
             * @param id The LID of the film collection.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--film-collection--id-}
             */
            get: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film-collection/".concat(id),
                    auth: _this.credentials,
                    params: params
                });
            }
        };
        this.film = {
            /**
             * A cursored window over the list of films.
             *
             * Use the `next` cursor to move through the list. The response will include the film
             * relationships for the signed-in member and the member indicated by the `member` LID if
             * specified.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--films}
             */
            all: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get a list of films matching a given search term.
             *
             * Titles are returned in order of relevance. Up to 100 films will be returned.
             *
             * @deprecated Please use `/search?input={input}&searchMethod=Autocomplete&include=FilmSearchItem` instead.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--films-autocomplete}
             */
            autocomplete: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films/autocomplete',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get a list of countries supported by the /films endpoint.
             *
             * Countries are returned in alphabetical order.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--films-countries}
             */
            countries: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films/countries',
                    auth: _this.credentials
                });
            },
            /**
             * Get a list of services supported by the /films endpoint.
             *
             * Services are returned in logical order. Some services (including 'My Services' options) are
             * only available to paying members, so results will vary based on the authenticated member's
             * status.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--films-film-services}
             */
            services: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films/film-services',
                    auth: _this.credentials
                });
            },
            /**
             * Get a list of genres supported by the /films endpoint.
             *
             * Genres are returned in alphabetical order.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--films-genres}
             */
            genres: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films/genres',
                    auth: _this.credentials
                });
            },
            /**
             * Get a list of languages supported by the /films endpoint.
             *
             * Languages are returned in alphabetical order.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--films-languages}
             */
            languages: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/films/languages',
                    auth: _this.credentials
                });
            },
            /**
             * Get details about a film by ID. Supports an optional member ID to honor custom-poster
             * settings.
             *
             * @param id The LID of the film.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--film--id-}
             */
            get: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get availability data for a film by ID.
             *
             * @private First party API clients only
             * @param id The LID of the film.
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--availability}
             */
            getAvailability: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id, "/availability"),
                    auth: _this.credentials
                });
            },
            /**
             * Get details of the authenticated member's friends' relationship with a film by ID.
             *
             * @param id The LID of the film.
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--friends}
             */
            getMemberFriends: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id, "/friends"),
                    auth: _this.credentials
                });
            },
            /**
             * Get details of the authenticated member's relationship with a film by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the film.
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--me}
             */
            getMemberRelationship: function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id, "/me"),
                    auth: _this.credentials
                });
            },
            /**
             * Get details of members' relationships with a film by ID.
             *
             * @param id The LID of the film.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--members}
             */
            getMembers: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id, "/members"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Report a film by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the film.
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--report}
             */
            report: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/film/".concat(id, "/report"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get statistical data about a film by ID.
             *
             * @param id The LID of the film.
             * @see {@link https://api-docs.letterboxd.com/#path--film--id--statistics}
             */
            statistics: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/film/".concat(id, "/statistics"),
                    auth: _this.credentials
                });
            }
        };
        this.list = {
            /**
             * A cursored window over a list of lists.
             *
             * Use the `next` cursor to move through the list.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--lists-get}
             */
            all: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/lists',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Create a list.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--lists-post}
             */
            create: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/lists',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Add one or more films to one or more lists.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--lists-patch}
             */
            updateLists: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: '/lists',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get a list of featured topics/lists (e.g. for display in the Browse tab of our apps).
             *
             * @see {@link https://api-docs.letterboxd.com/#path--lists-topics}
             */
            topics: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/lists/topics',
                    auth: _this.credentials
                });
            },
            /**
             * Get details of a list by ID.
             *
             * @param id The LID of the list.
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--get}
             */
            get: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/list/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * Update a list by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the list.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--patch}
             */
            update: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/list/".concat(id),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Delete a list by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the list.
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--delete}
             */
            "delete": function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'delete',
                    path: "/list/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * A cursored window over the comments for a list.
             *
             * Use the `next` cursor to move through the comments.
             *
             * @param id The LID of the list.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--comments-get}
             */
            getComments: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/list/".concat(id, "/comments"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Create a comment on a list.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--comments-post}
             */
            createComment: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/list/".concat(id, "/comments"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get entries for a list by ID.
             *
             * @param id The LID of the list.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--list--id--entries}
             */
            getEntries: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/list/".concat(id, "/entries"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details of the authenticated member's relationship with a list by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the list.
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--me-get}
             */
            getRelationship: function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: "/list/".concat(id, "/me"),
                    auth: _this.credentials
                });
            },
            /**
             * Update the authenticated member's relationship with a list by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the list.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--list--id--me-patch}
             */
            updateRelationship: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/list/".concat(id, "/me"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Report a list by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the list.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--list--id--report}
             */
            report: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/list/".concat(id, "/report"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get statistical data about a list by ID.
             *
             * @param id The LID of the list.
             * @see {@link https://api-docs.letterboxd.com/#path--list--id--statistics}
             */
            statistics: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/list/".concat(id, "/statistics"),
                    auth: _this.credentials
                });
            }
        };
        this.logEntry = {
            /**
             * A cursored window over the log entries for a film or member. A log entry is either a diary
             * entry (must have a date) or a review (must have review text). Log entries can be both a
             * diary entry and a review if they satisfy both criteria.
             *
             * Use the `next` cursor to move through the list.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entries-get}
             */
            all: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/log-entries',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Create a log entry. A log entry is either a diary entry (must have a date) or a review (must
             * have review text). Log entries can be both a diary entry and a review if they satisfy both
             * criteria.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entries-post}
             */
            create: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/log-entries',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details about a log entry by ID.
             *
             * @param id The LID of the log entry.
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--get}
             */
            get: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/log-entry/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * Update a log entry by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--patch}
             */
            update: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/log-entry/".concat(id),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Delete a log entry by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--delete}
             */
            "delete": function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'delete',
                    path: "/log-entry/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * A cursored window over the comments for a log entry's review.
             *
             * Use the `next` cursor to move through the comments.
             *
             * @param id The LID of the log entry.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--comments-get}
             */
            getComments: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/log-entry/".concat(id, "/comments"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Create a comment on a review.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--comments-post}
             */
            createComment: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/log-entry/".concat(id, "/comments"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details of the authenticated member's relationship with a log entry's review by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--me-get}
             */
            getRelationship: function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: "/log-entry/".concat(id, "/me"),
                    auth: _this.credentials
                });
            },
            /**
             * Update the authenticated member's relationship with a log entry's review by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--log-entry--id--me-patch}
             */
            updateRelationship: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/log-entry/".concat(id, "/me"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Report a log entry's review by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the log entry.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--log-entry--id--report}
             */
            report: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/log-entry/".concat(id, "/report"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get statistical data about a log-entry's review by ID.
             *
             * @param id The LID of the log entry.
             * @see {@link https://api-docs.letterboxd.com/#path--log-entry--id--statistics}
             */
            statistics: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/log-entry/".concat(id, "/statistics"),
                    auth: _this.credentials
                });
            }
        };
        this.me = {
            /**
             * Get details about the authenticated member.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @see {@link https://api-docs.letterboxd.com/#operation--me-get}
             */
            get: function () {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: '/me',
                    auth: _this.credentials
                });
            },
            /**
             * Update the profile settings for the authenticated member.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--me-patch}
             */
            update: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: '/me',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Deregister a device so it no longer receives push notifications.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--me-deregister-push-notifications}
             */
            deregisterPushNotifications: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/me/deregister-push-notifications',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Deactivate account.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--me-disable}
             */
            deactivate: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/me/disable',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Register a device so it can receive push notifications. Letterboxd uses Firebase to send
             * notifications, so the token provided must be obtained from Firebase.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--me-register-push-notifications}
             */
            registerPushNotifications: function (params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/me/register-push-notifications',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Request a validation link via email.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)). If the email address associated
             * with a member's account has not been validated and the validation link has expired or been
             * lost, use this endpoint to request a new validation link.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--me-validation-request}
             */
            validationRequest: function () {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: '/me/validation-request',
                    auth: _this.credentials
                });
            }
        };
        this.member = {
            /**
             * A cursored window over the list of members.
             *
             * Use the `next` cursor to move through the list.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--members}
             */
            all: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/members',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get a list of pronouns supported by the `PATCH` [/me](https://api-docs.letterboxd.com/#operation--me-patch)
             * endpoint.
             *
             * @see {@link https://api-docs.letterboxd.com/#path--members-pronouns}
             */
            pronouns: function () {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/members/pronouns',
                    auth: _this.credentials
                });
            },
            /**
             * Create a new account.
             *
             * Use this endpoint to register a new member account with the Letterboxd network. Usernames
             * must be between 2 and 15 characters long and may only contain upper or lowercase letters,
             * numbers or the underscore (`_`) character.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--members-register}
             */
            register: function (params) {
                return (0, core_1.request)({
                    method: 'post',
                    path: '/members/register',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details about a member by ID.
             *
             * @param id The LID of the member.
             * @see {@link https://api-docs.letterboxd.com/#path--member--id-}
             */
            get: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id),
                    auth: _this.credentials
                });
            },
            /**
             * A cursored window over the activity for a member.
             *
             * Use the `next` cursor to move through the list.
             *
             * @param id The LID of the member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--activity}
             */
            getMemberActivity: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/activity"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get the list of a member's tags, or those that match an optional search prefix.
             *
             * The tags will be returned in order of relevance. All tags previously used by the member will
             * be returned if no search prefix is specified.
             *
             * @param id The LID of the member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--list-tags-2}
             */
            getMemberListTags: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/list-tags-2"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get the list of a member's tags, or those that match an optional search prefix.
             *
             * The tags will be returned in order of relevance. All tags previously used by the member will
             * be returned if no search prefix is specified.
             *
             * @param id The LID of the member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--log-entry-tags}
             */
            getMemberLogEntryTags: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/log-entry-tags"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details of the authenticated member's relationship with another member by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the other member.
             * @see {@link https://api-docs.letterboxd.com/#operation--member--id--me-get}
             */
            getMemberRelationship: function (id) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/me"),
                    auth: _this.credentials
                });
            },
            /**
             * Update the authenticated member’s relationship with another member by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the other member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#operation--member--id--me-patch}
             */
            updateMemberRelationship: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'patch',
                    path: "/member/".concat(id, "/me"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Report a member by ID.
             *
             * Calls to this endpoint must include the access token for an authenticated member (see
             * [Authentication](https://api-docs.letterboxd.com/#auth)).
             *
             * @param id The LID of the member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--report}
             */
            report: function (id, params) {
                if (!_this.credentials.accessToken) {
                    return Promise.reject(new errors_1.MissingAccessTokenError());
                }
                return (0, core_1.request)({
                    method: 'post',
                    path: "/member/".concat(id, "/report"),
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get statistical data about a member by ID.
             *
             * @param id The LID of the member.
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--statistics}
             */
            statistics: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/statistics"),
                    auth: _this.credentials
                });
            },
            /**
             * Get details of a member's public watchlist by ID.
             *
             * The response will include the film relationships for the signed-in member, the watchlist's
             * owner, and the member indicated by the `member` LID if specified (the `member` and
             * `memberRelationship` parameters are optional, and can be used to perform comparisons between
             * the watchlist owner and another member). Use the
             * [/film/{id}/me](https://api-docs.letterboxd.com/#path--film--id--me) endpoint to add or
             * remove films from a member's watchlist.
             *
             * @param id The LID of the member.
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--member--id--watchlist}
             */
            watchlist: function (id, params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/member/".concat(id, "/watchlist"),
                    auth: _this.credentials,
                    params: params
                });
            }
        };
        /**
         * Get recent news from the Letterboxd editors.
         *
         * @param params
         * @see {@link https://api-docs.letterboxd.com/#path--news}
         */
        this.news = function (params) {
            return (0, core_1.request)({
                method: 'get',
                path: '/news',
                params: params
            });
        };
        /**
         * @param params
         * @see {@link https://api-docs.letterboxd.com/#path--search}
         */
        this.search = function (params) {
            return (0, core_1.request)({
                method: 'get',
                path: '/search',
                params: params
            });
        };
        this.story = {
            /**
             * A cursored window over a list of stories.
             *
             * Use the `next` cursor to move through the list.
             *
             * @param params
             * @see {@link https://api-docs.letterboxd.com/#path--stories}
             */
            all: function (params) {
                return (0, core_1.request)({
                    method: 'get',
                    path: '/stories',
                    auth: _this.credentials,
                    params: params
                });
            },
            /**
             * Get details of a story by ID.
             *
             * @param id The LID of the story.
             * @see {@link https://api-docs.letterboxd.com/#path--story--id-}
             */
            get: function (id) {
                return (0, core_1.request)({
                    method: 'get',
                    path: "/stories/".concat(id),
                    auth: _this.credentials
                });
            }
        };
        this.credentials.apiKey = apiKey;
        this.credentials.apiSecret = apiSecret;
        if (accessToken) {
            this.credentials.accessToken = accessToken;
        }
    }
    return Client;
}());
exports["default"] = Client;
